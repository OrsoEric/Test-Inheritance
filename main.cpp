/****************************************************************
**	OrangeBot Project
*****************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************
**	Test Inheritance
*****************************************************************
**  Test how inheritance works in C++
****************************************************************/

/****************************************************************
**	DESCRIPTION
****************************************************************
**	class Human
**		age
**		gender
**		name
**	class Student
**		id
**
**	Students are also human, inherit function from the parent class
****************************************************************/

/****************************************************************
**	HISTORY VERSION
****************************************************************
**
****************************************************************/

/****************************************************************
**	KNOWN BUGS
****************************************************************
**
****************************************************************/

/****************************************************************
**	TODO
****************************************************************
**
****************************************************************/

/****************************************************************
**	INCLUDES
****************************************************************/

//Standard C Libraries
//#include <cstdio>
//#include <cstdlib>

//Standard C++ libraries
#include <iostream>

//Include parent class human
#include "human.h"
//Include derived class student. students are a sub-type of humans
#include "student.h"
//Include user log trace
#include "debug.h"

/****************************************************************
**	NAMESPACES
****************************************************************/

//Never use a whole namespace. Use only what you need from it.
using std::cout;
using std::endl;

/****************************************************************
**	DEFINES
****************************************************************/

/****************************************************************
**	MACROS
****************************************************************/

/****************************************************************
**	PROTOTYPES
****************************************************************/

//create and fill the base class
extern void make_human( void );
//create and fill the derived class
extern void make_student( void );

/****************************************************************
**	GLOBAL VARIABILES
****************************************************************/

/****************************************************************
**	FUNCTIONS
****************************************************************/

/****************************************************************
**	MAIN
****************************************************************
**	INPUT:
**	OUTPUT:
**	RETURN:
**	DESCRIPTION:
****************************************************************/

int main()
{
	///----------------------------------------------------------------
	///	STATIC VARIABILE
	///----------------------------------------------------------------

	///----------------------------------------------------------------
	///	LOCAL VARIABILE
	///----------------------------------------------------------------

	///----------------------------------------------------------------
	///	CHECK AND INITIALIZATIONS
	///----------------------------------------------------------------

	//Start Debugging. Show function nesting level 0 and above
	DSTART( 0 );
	//Trace Enter main
	DENTER();

	///----------------------------------------------------------------
	///	BODY
	///----------------------------------------------------------------

	cout << "OrangeBot Projects\n" << endl;
	//print in the 'debug.log' file. works just like a fully featured printf

	//Crate a human
	make_human();

	//Create a student
	make_student();

	///----------------------------------------------------------------
	///	FINALIZATIONS
	///----------------------------------------------------------------

	//Trace Return from main
	DRETURN();
	//Stop Debugging
	DSTOP();

    return 0;
}	//end function: main

/****************************************************************************
**	make_human | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

void make_human( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//Trace Enter with arguments
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	DPRINT("Constructing parent class\n");

	User::Human my_human = User::Human( true, 42, "Bob" );

	cout << endl << "Human" << endl;

	my_human.show();

	//Deconstructor will be called automatically when function goes out of scope
	//DPRINT("Deconstructing parent class\n");

	//my_human.~Human();


	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return;
}	//end function: make_human

/****************************************************************************
**	make_student | void
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

void make_student( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//Trace Enter with arguments
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	DPRINT("Constructing derived class\n");

	User::Student my_student = User::Student( true, 23, "Meruem", 123456 );

	cout << endl << "Student" << endl;

	my_student.show();

	//Deconstructor will be called automatically when function goes out of scope
	//Deconstructor are called in opposite order. first derived class, than base class
	//DPRINT("Deconstructing derived class\n");

	//my_student.~Student();


	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return;
}	//end function: make_student
